# edu
1.set classspath에 대해 설명하시오.
-클래스 패스는 쉽게 말해 JVM이 프로그램을 실행할 때 클래스를 찾기 위한 기준이 되는 경로라고 생각하면 된다.

2.절대 경로와 상대경로란?
절대경로-최상위 루트 디렉토리의 시작점으로 경유한 경로를 전부 기입하는 방식
상대경로-현재 디렉토리를 기준으로 지정한 경로를 기입하는 방식

3.'cd.'와 'cd..'의 차이는?
cd.:현재의 경로롤 이동을 의미
cd..:상위 경로로의 이동을 의미

4.package에 대해여 설명해 보시오
-많은 클래스들을 체계적으로 관리하기 위해 만들어졌기 때문에 폴더의 개념으로 생각하면 된다.
클래스명의 동일한 이름 충돌을 방지하기 위해 패키지를 생성하고 디렉터리의 계층구조는 (.)으로 구분된다.

5.정보은닉에 대하여 설명하여 보시오.
-클래스 내부에서 사용할 변수나 메소드를 private로 선언해서 외부에서 접근하지 못하도록 하는 것을 객체지향에서"정보은닉"이라고 한다.

6.접근제한자에 대하여 설명하시오
- 총 4가지로 구분 되어있고 중요도에 따라 접근을 제한할 수 있다 .
public- 모든 접근을 허용
protected - 같은 패키지에 있는 객체와 상속관계에 객체들만 허용 
default - 같은 패키지에 있는 객체들만 허용
private - 현재 객체 내에서만 허용

7.지역변수에 접근 제한자가 필요없는 이유?

- 지역변수는 메소드 내부에서만 사용하기 위해서 선언하는 변수이기 때문에 실행이 끝나면 
메모리에 남아 있지 않고 없어져서 지역변수에는 접근 제한자가 필요하지 않다.


8.아래의 클래스를 구현하시오.

class Money{
	private int money;
	
	Money(int money){
		setMoney(money);		
	}
	
	public void setMoney(int money) {
		if(money<0) {
			this.money = 0;
			System.out.println("잘못 입력 하셨습니다.");
			
		}
		this.money=money;
	}
	public void show() {
		System.out.println(money+"원의 금액을 한국 화폐로 바꾸었을 때 필요한 지폐 갯수는?");
		System.out.println("오만원:" + money/50000+"장");
		money=money%50000;
		System.out.println("만원:" + money/10000+"장");
		money=money%10000;
		System.out.println("오천원:" + money/5000+"장");
		money=money%5000;
		System.out.println("천원:" + money/1000+"장");
		money=money%1000;
		System.out.println("오백원:" + money/500+"장");
		money=money%500;
		System.out.println("백원:" + money/100+"장");
		money=money%100;
	}
}


public class Ex_5 {
	public static void main(String[] args) {
        Money money = new Money(52500);
        money.show();
	}

}

9.아래의 클래스를 구현하시오.

Employee employee = new Employee("홍길동", 19, "서울 뉴욕시", "개발 1팀");
employee.printInfo();
}

출력:
이름 : 홍길동
나이 : 19
주소 : 서울 뉴욕시
부서 : 개발 1팀

작성:


class Employee {
	
	private String name;
	private int age;
	private String addr;
	private String team;
	
	Employee(String name, int age, String addr, String team){
		setName(name);
		setAge(age);
		setAddr(addr);
		setTeam(team);
	}

	void setName(String name) {
		this.name = name;
	}

	void setAge(int age) {
		if(age <= 0) {
			System.out.println("-err-");
			return;
		}
		this.age = age;
	}

	void setAddr(String addr) {
		this.addr = addr;
	}

	void setTeam(String team) {
		this.team = team;
	}
	
	void printInfo() {
		System.out.println("이름 : " + name);
		System.out.println("나이 : " + age);
		System.out.println("주소 : " + addr);
		System.out.println("부서 : " + team);
	}
	
}

public class EmployeeTest {

	public static void main(String[] args) {
		Employee employee = new Employee("홍길동", 19, "서울 뉴욕시", "개발 1팀");
		employee.printInfo();		
	}

}

10.다음 멤버를 가지고 직사각형을 표현하는 Rectangle 클래스를 작성하라.
- int 타입의 x, y, width, height 필드 : 사각형을 구성하는 점과 크기 정보
- x, y, width, height 값을 매개변수로 받아 필드를 초기화하는 생성자
- int square() : 사각형 넓이 리턴
- void show() : 사각형의 좌표와 넓이를 화면에 출력
- boolean contains(Rectangle r) : 매개변수로 받은 r이 현 사각형 안에 있으면 true 리턴 (겹치면 안됨. 완전히 안에 있어야 true)
- main() 메소드의 코드와 실행 결과는 다음과 같다.


public static void main(String args[]) {
		Rectangle r = new Rectangle(2, 2, 8, 7);
		Rectangle s = new Rectangle(5, 5, 6, 6);
		Rectangle t = new Rectangle(1, 1, 10, 10);
		
		r.show();
		System.out.println("s의 면적은 "+s.square());
		if(t.contains(r)) System.out.println("t는 r을 포함합니다.");
		if(t.contains(s)) System.out.println("t는 s를 포함합니다.");
}

출력:
(2,2)에서 크기가 8x7인 사각형
s의 면적은 36
t는 r을 포함합니다.

class Rectangle {
	//주의 private로 항상 하기
	private int x, y, w, h;
	
	Rectangle(int x, int y, int w, int h){
		setX(x);
		setY(y);
		setW(w);
		setH(h);
	}
	
	void setX(int x) {
		if(x<=0)
			return;
		this.x = x;
	}
	void setY(int y) {
		if(y<=0)
			return;
		this.y = y;
	}
	void setW(int w) {
		if(w<=0)
			return;
		this.w = w;
	}
	void setH(int h) {
		if(h<=0)
			return;
		this.h = h;
	}
	
	int square() {
		return w*h;
	}
	
	void show() {
		System.out.println("("+ x +","+ y +")에서 크기가" + w + "x" + h +"인 사각형");
	}
	
	private boolean isContainCoordi(int coordx, int coordy) {
		if(( x < coordx) && (coordx < x+w)){
			if( (y < coordy) && (coordy < y+h)) {
				return true;
			}
		}
		return false;
	}
	
	boolean contains(Rectangle r) {
		int cnt = 0;
		
		if(isContainCoordi(r.x, r.y))
			cnt++;
		if(isContainCoordi(r.x, r.y+r.w))
			cnt++;
		if(isContainCoordi(r.x+r.h, r.y))
			cnt++;
		if(isContainCoordi(r.x+r.h, r.y+r.w))
			cnt++;			
	
		if(cnt == 4)
			return true;
		else
			return false;
	}

}

class RectCoordiTest {

	public static void main(String[] args) {
		Rectangle r = new Rectangle(2,2,8,7);
		//Rectangle r = new Rectangle(2,2,9,7);//test
		//Rectangle r = new Rectangle(2,2,6,7);//test
		
		Rectangle s = new Rectangle(5,5,6,6);
		Rectangle t = new Rectangle(1,1,10,10);
		r.show();
		System.out.println("s의 면적은 " + s.square());
		
		if(t.contains(r))
			System.out.println("t는 r을 포함합니다.");
		
		
		if(t.contains(s))
			System.out.println("t는 s를 포함합니다.");

	}
}


