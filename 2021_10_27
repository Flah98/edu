# edu

1. Maker 인터페이스에 대하여 설명하시오.
마커 인터페이스는 메서드 선언이 없는 인터페이스이다. 대표적인 마커 인터페이스로 Serializable과 Cloneable이 있다.

2. 추상 클래스(abstract class)에 대하여 설명하시오.
실체클래스의 공통적인 부분(변수,메소드)를 추출해서 선언한 클래스
추상클래스는 객체를 생성할 수 없다. 아직은 실체성이 없고 구체적이지 않기때문
추상클래스와 실체클래스는 상속관계이다.

3.Exception 에 대하여 설명하시오.
예외란 error에 일종이며, 발생시 시스템 및 프로그램을 불능상태를 야기함..
하지만 이를 막기 위해 예외 처리를 통해, 시스템 및 프로그램을 정상실행 상태로 유지하도록 함

4.에러를 내는 주체는?
JVM

5. 아래의 소스코드를 참고 하여 중에 Main안에 있는 두개의
getAllArea 과 getArea 함수를 완성하시오.
================================
interface AreaGetable {
	double getArea();

}

class Circle implements AreaGetable {
	private double r;

	public Circle(double r) {
		this.r = r;
	}

	@Override
	public double getArea() {

		return r * r * Math.PI;
	}
}

class Rectangle implements AreaGetable {

	private double width, height;

	public Rectangle(double width, double height) {
		this.height = height;
		this.width = width;
	}

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return width * height;
	}
}


class CondOp {
	public static void main(String[] args) {

		AreaGetable[] area = { new Rectangle(4, 5), new Circle(4), new Circle(4), new Circle(5), new Circle(5),
				new Circle(6) ,new Rectangle(4, 5),new Rectangle(4, 5),new Rectangle(4, 5),};

		// AreaGetable oneArea = new Circle(4);
		System.out.println(getAllArea(area));
		System.out.println(getArea(new Circle(10))); //314
		System.out.println(getArea(new Rectangle(4, 5))); //20

		// oneArea = new Rectangle(4,5);
		// System.out.println(area.getArea());

	}
}
public class Test34 {

	public static void main(String[] args) {
		
		AreaGetable[] area = { new Rectangle(4, 5), new Circle(4), new Circle(4), new Circle(5), new Circle(5),
				new Circle(6) ,new Rectangle(4, 5),new Rectangle(4, 5),new Rectangle(4, 5),};

		// AreaGetable oneArea = new Circle(4);
		System.out.println(getAllArea(area));
		System.out.println(getArea(new Circle(10))); //314
		System.out.println(getArea(new Rectangle(4, 5))); //20

		// oneArea = new Rectangle(4,5);
		// System.out.println(area.getArea());
		
		
	}
	
	public static double getAllArea(AreaGetable[] area) {
		double sum = 0;
		for (AreaGetable areaGetable : area) {
			sum += areaGetable.getArea();
		}
		return sum;
	}

	public static double getArea(AreaGetable areaGet) {
		return areaGet.getArea();
	}
}



interface AreaGetable {
	double getArea();

}


class Circle implements AreaGetable {
	private double r;

	public Circle(double r) {
		this.r = r;
	}

	@Override
	public double getArea() {

		return r * r * Math.PI;
	}
}

class Rectangle implements AreaGetable {

	private double width, height;

	public Rectangle(double width, double height) {
		this.height = height;
		this.width = width;
	}

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return width * height;
	}
}

6. 아래의 결과를 나타내는 사칙연산 계산기를 완성하시오.
-주의 잘못된 입력이 있으면 처음부터 다시 입력을 받도록 
예외처리 구문(try catch)을 넣을것


*** 계산기 ***
수1 : 10
수2 : 20
연산 : +
계산 결과 : 30
계속 하시겠습니까? 계속 : Y , 종료 : N
y
*** 계산기 ***
수1 : R
잘못된 입력입니다. 다시입력해 주세요
*** 계산기 ***
수1 : 10
수2 : 20
연산 : *
계산 결과 : 200
계속 하시겠습니까? 계속 : Y , 종료 : N
y
*** 계산기 ***
수1 : 90
수2 : 80
연산 : /
계산 결과 : 1
계속 하시겠습니까? 계속 : Y , 종료 : N
n
종료입니다.

public class Test33 {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Calc calc = new Calc();
		while(true) {
			System.out.println("*** 계산기 ***");
			
			try {
				System.out.print("수1:");
				int n1 = sc.nextInt();
				calc.setN1(n1);
		
			
				System.out.print("수2:");
				int n2 = sc.nextInt();
				calc.setN2(n2);
	
			}catch(Exception e){
				System.out.println("잘못된 입력입니다. 다시입력해 주세요");
				sc.nextLine();
				continue;
			}
			
			System.out.print("연산:");
			String str = sc.next();
			if(calc.checkOpErr(str)) {
				System.out.println("잘못된 입력입니다. 다시입력해 주세요");
				sc.nextLine();
				continue;
			}
			int res = calc.run(str);
			System.out.println("계산 결과 :" + res);
				
	
			
			
			System.out.println("계속 하시겠습니까? 계속 : Y , 종료 : N");
			String strExit = sc.next();
			if(strExit.equals("N") || strExit.equals("n")) {
				System.out.println("종료입니다.");
				break;
			}
			
		}
		
	}
}

class Calc{
	private int n1, n2, res;
	public void setN1(int n1) {
		this.n1 = n1;
	}
	public void setN2(int n2) {
		this.n2 = n2;
	}
	int run(String oper) {
		res = 0;
		// 주의 : String은 equals() 사용.
		if(oper.equals("*")) {
			 res = n1 * n2;
		}else if(oper.equals("-")) {
			res = n1 - n2;
		}else if(oper.equals("+")) {
			res = n1 + n2;
		}else if(oper.equals("/")) {
			res = n1 / n2;
		}
		return res; 
	}
	boolean checkOpErr(String oper) {
		if(oper.equals("*") || oper.equals("-") || oper.equals("+") || oper.equals("/")){
			return false;
		}
		return true;
	}
}
